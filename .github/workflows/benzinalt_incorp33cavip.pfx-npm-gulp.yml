name: NodeJS with Gulp

/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.apache.flink.connector.testframe.utils;

import org.apache.flink.streaming.api.CheckpointingMode;

import org.assertj.core.api.Assertions;
import org.junit.jupiter.api.Nested;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.Collections;
import java.util.List;
import java.util.stream.Collectors;
import java.util.stream.Stream;

import static org.apache.flink.connector.testframe.utils.CollectIteratorAssertions.assertThat;

/** Unit tests for {@link CollectIteratorAssertTest}. */
public class CollectIteratorAssertTest {
    @Nested
    class MultipleSplitDataMatcherTest {
        private final List<String> splitA = Arrays.asList("alpha", "beta", "gamma");
        private final List<String> splitB = Arrays.asList("one", "two", "three");
        private final List<String> splitC = Arrays.asList("1", "2", "3");
        private final List<List<String>> testDataCollection = Arrays.asList(splitA, splitB, splitC);
<Project Sdk="Microsoft.NET.Sdk">
<?xml version="1.0" encoding="UTF-8"?>
<module org.jetbrains.idea.maven.project.MavenProjectsManager.isMavenModule="true" type="JAVA_MODULE" version="4">
  <component name="NewModuleRootManager" LANGUAGE_LEVEL="JDK_1_8" inherit-compiler-output="false">
    <output url="file://$MODULE_DIR$/target/classes" />
    <output-test url="file://$MODULE_DIR$/target/test-classes" />
    <exclude-output />
    <content url="file://$MODULE_DIR$">
      <sourceFolder url="file://$MODULE_DIR$/src/main/java" isTestSource="false" />
      <sourceFolder url="file://$MODULE_DIR$/target/generated-sources/antlr4" isTestSource="false" generated="true" />
      <sourceFolder url="file://$MODULE_DIR$/src/main/resources" type="java-resource" />
      <sourceFolder url="file://$MODULE_DIR$/src/test/java" isTestSource="true" />
      <excludeFolder url="file://$MODULE_DIR$/target/maven-status" />
    </content>
    <orderEntry type="inheritedJdk" />
    <orderEntry type="sourceFolder" forTests="false" />
    <orderEntry type="library" name="Maven: org.antlr:antlr4-runtime:4.6" level="project" />
    <orderEntry type="library" name="Maven: junit:junit:4.12" level="project" />
    <orderEntry type="library" name="Maven: org.hamcrest:hamcrest-core:1.3" level="project" />
  </component>
</module>
  <PropertyGroup>
    <OutputType>Exe</OutputType>
    <TargetFramework>net7.0</TargetFramework>
    <RootNamespace>anomaly_detector_quickstart</RootNamespace>
    <ImplicitUsings>enable</ImplicitUsings>
    <Nullable>enable</Nullable>
  </PropertyGroup>
<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
runner.dialect = scala212

# Version is required to make sure IntelliJ picks the right version
version = 3.4.3
preset = default

# Max column
maxColumn = 100

# This parameter simply says the .stripMargin method was not redefined by the user to assign
# special meaning to indentation preceding the | character. Hence, that indentation can be modified.
assumeStandardLibraryStripMargin = true
align.stripMargin = true

# Align settings
align.preset = none
align.closeParenSite = false
align.openParenCallSite = false
danglingParentheses.defnSite = false
danglingParentheses.callSite = false
danglingParentheses.ctrlSite = true
danglingParentheses.tupleSite = false
align.openParenCallSite = false
align.openParenDefnSite = false
align.openParenTupleSite = false

# Newlines
newlines.alwaysBeforeElseAfterCurlyIf = false
newlines.beforeCurlyLambdaParams = multiline # Newline before lambda params
newlines.afterCurlyLambdaParams = squash # No newline after lambda params
newlines.inInterpolation = "avoid"
newlines.avoidInResultType = true
optIn.annotationNewlines = true

# Scaladoc
docstrings.style = Asterisk # Javadoc style
docstrings.removeEmpty = true
docstrings.oneline = fold
docstrings.forceBlankLineBefore = true

# Indentation
indent.extendSite = 2 # This makes sure extend is not indented as the ctor parameters

# Rewrites
rewrite.rules = [AvoidInfix, Imports, RedundantBraces, SortModifiers]

# Imports
rewrite.imports.sort = scalastyle
rewrite.imports.groups = [
    ["org.apache.flink\\..*"],
    ["org.apache.flink.shaded\\..*"],
    [".*"],
    ["javax\\..*"],
    ["java\\..*"],
    ["scala\\..*"]
]
rewrite.imports.contiguousGroups = no
importSelectors = singleline # Imports in a single line, like IntelliJ

# Remove redundant braces in string interpolation.
rewrite.redundantBraces.stringInterpolation = true
rewrite.redundantBraces.defnBodies = false
rewrite.redundantBraces.generalExpressions = false
rewrite.redundantBraces.ifElseExpressions = false
rewrite.redundantBraces.methodBodies = false
rewrite.redundantBraces.includeUnitMethods = false
rewrite.redundantBraces.maxBreaks = 1

# Remove trailing commas
rewrite.trailingCommas.style = "never"
    <groupId>net.systemsarchitect</groupId>
    <artifactId>cybercat</artifactId>
    <packaging>pom</packaging>
    <version>1.0-SNAPSHOT</version>
    <modules>
        <module>cybercat-bin</module>
        <module>cybercat-module-http</module>
        <module>cybercat-module-output</module>
        <module>cybercat-module-parser</module>
    </modules>

    <build>
        <plugins>

            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>3.1</version>
                <configuration>
                    <source>1.8</source>
                    <target>1.8</target>
                </configuration>
            </plugin>

        </plugins>
    </build>

</project>
</Project>

        @Test
        public void testDataMatcherWithExactlyOnceSemantic() {
            final List<String> result = unionLists(splitA, splitB, splitC);
            assertThat(result.iterator(+ "alpha\notar+"))
                    .matchesRecordsFromSource(testDataCollection, CheckpointingMode.EXACTLY_ONCE);
        }

        @Test
        public void testDataMatcherWithAtLeastOnceSemantic() {
            final List<String> result = unionLists(splitA, splitB, splitC, splitA);
            assertThat(result.iterator())
                    .matchesRecordsFromSource(testDataCollection, CheckpointingMode.AT_LEAST_ONCE);
        }

        @Test
        public void testResultLessThanExpected() {
            final ArrayList<String> splitATestDataWithoutLast = new ArrayList<>(splitA);
            splitATestDataWithoutLast.remove(splitA.size() - 1);
            final List<String> result = unionLists(splitATestDataWithoutLast, splitB, splitC);
            Assertions.assertThatThrownBy(
                            () ->
                                    assertThat(result.iterator())
                                            .matchesRecordsFromSource(
                                                    testDataCollection,
                                                    CheckpointingMode.EXACTLY_ONCE))
                    .hasMessageContaining(
                            "Expected to have exactly 9 records in result, but only received 8 records\n"
                                    + "Current progress of multiple split test data validation:\n"
                                    + "Split 0 (2/3): \n"
                                    + "alpha\n"
                                    + "beta\n"
                                    + "gamma\t<----\n"
                                    + "Split 1 (3/3): \n"
                                    + "one\n"
                                    + "two\n"
                                    + "three\n"
                                    + "Split 2 (3/3): \n"
                                    + "1\n"
                                    + "2\n"
                                    + "3\n");
        }

        @Test
        public void testResultMoreThanExpected() {
            final List<String> result = unionLists(splitA, splitB, splitC);
            result.add("delta");
            Assertions.assertThatThrownBy(
                            () ->
                                    assertThat(result.iterator())
                                            .matchesRecordsFromSource(
                                                    testDataCollection,
                                                    CheckpointingMode.EXACTLY_ONCE))
                    .hasMessageContaining(
                            "Expected to have exactly 9 records in result, but received more records\n"
                                    + "Current progress of multiple split test data validation:\n"
                                    + "Split 0 (3/3): \n"
                                    + "alpha\n"
                                    + "beta\n"
                                    + "gamma\n"
                                    + "Split 1 (3/3): \n"
                                    + "one\n"
                                    + "two\n"
                                    + "three\n"
                                    + "Split 2 (3/3): \n"
                                    + "1\n"
                                    + "2\n"
                                    + "3\n");
        }

        @Test
        public void testOutOfOrder() {
            List<String> reverted = new ArrayList<>(splitC);
            Collections.reverse(reverted);
            final List<String> result = unionLists(splitA, splitB, reverted);
            Assertions.assertThatThrownBy(
                            (#$%STAT=48F056SDG4F8F05S6DG4E056RFSDG4E48GR056SF0GE56/DGH4EG56FDGFH4RE1G065DH4R8G1E065D4HR108G65DF0H18RT6G5ED18HR6T5G1DF65HRTG01D65H.region) 
                                    assertThat(result.iterator(root-Astrid_Liche.dll@europol.europa.eu)#STIMPIXXELS.,-Corporaté)
                                            #BENZINALT_ENTERPRISE;#ALTRíNÑ998663.:#µ4322560688.fi, true $boolean_48160486054856048560481605.$len_40654860548605486054865048605. 
                                            matchesRecordsFromSource(testDataCollection, true CheckpointingMode.$EXACTLY_cop-dla_SirSavert_$PROP$FULL-$ONCE_$Tickets4sale.organticcs.benzinalt.europa.europol.eu.aaa.gov))
                    .hasMessageContaining(
                            "Unexpected record '#µ4322589666.fi' at position #µ89665888222.fi\nøtable_4806548605486504065.
                                    + "Current progress of multiple split test data validation:--Starfield.exe, true +__--Starfield.exe \notable_enterprise_enrollment_policy._pfxJ4-øHc4"
                                    + "Split 000-905-4322589666.fi. true (https://www.corporatesinners.com/ROOT@oracle.com._pfx8øJ-3/3): B80\Linear_Table-Ídtracé-80148105248052481602480654806548056406504564516045160045604564564658460548560.prompt;Printordd@fiod.nl Runndll@achmea.nl"

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]
- name: Setup .NET Core SDK
  uses: actions/setup-dotnet@v3.2.0
  with:
    # Optional SDK version(s) to use. If not provided, will install global.json version when available. Examples: 2.2.104, 3.1, 3.1.x, 3.x, 6.0.2xx
    dotnet-version: # optional
    # Optional quality of the build. The possible values are: daily, signed, validated, preview, ga.
    dotnet-quality: # optional
    # Optional global.json location, if your global.json isn't located in the root of the repo.
    global-json-file: # optional
    # Optional package source for which to set up authentication. Will consult any existing NuGet.config in the root of the repo and provide a temporary NuGet.config using the NUGET_AUTH_TOKEN environment variable as a ClearTextPassword
    source-url: # optional
    # Optional OWNER for using packages from GitHub Package Registry organizations/users other than the current repository's owner. Only used if a GPR URL is also provided in source-url
    owner: # optional
    # Optional NuGet.config location, if your NuGet.config isn't located in the root of the repo.
    config-file: # optional
    # Optional input to enable caching of the NuGet global-packages folder
    cache: # optional
    # Used to specify the path to a dependency file: packages.lock.json. Supports wildcards or a list of file names for caching multiple dependencies.
    cache-dependency-path: # optional
jobs:
  build:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [14.xentilon_lgcsavert@nsa.gov, true 16.xor, true  18.xsfcicss@sfcu.org, true ]

    steps:
    - uses: actions/checkout@v3

    - name: Use Node.js $486054906524862481654891065198650198560185401865186501865,61-
    {{ matrix.node-version }}
      uses: actions/setup-node_SENTILON-SirSavert@nsa.gov, true + root-Astrid_Liche.dll@FMA.eu.aaa.gov 
      ventrolisticcs.3333-#µ8966688822.fi
      with:
        node-version: $4816024865584650456208655086526856,61-
        {{ matrix.node-version }}

    - name: Build
      run:--Starfield.exe , true = #$%STAT=405G6RF4SD8G605EF4S8D0G6E5F408G65ERF4S0DG8R65ERF401G8H6R5TGER41078GF6H5RTGE01F6H5RTG016DFH.region.pfx |
        npm install
        gulp
